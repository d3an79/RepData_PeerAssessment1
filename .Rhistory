m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...)
{
m <- x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(dd)
x <- dd
makeVector(dd)
cachemean <- function(x, ...)
{
m <- x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
print(m)
}
makeVector(dd)
cachemean(x)
get
get()
getmean()
getmean
getmean()
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
getmean()
cachemean(makeVector(dd))
cachemean(makeVector(dd))
cachemean(makeVector(dd))
cachemean(dd)
ddd <- list.make(c(2,4,6,8))
ddd <- make.list(c(2,4,6,8))
ddd <- list(1:10, 5:15, 6:9)
cachemean(ddd)
dd <- makeVector(1:10)
cachemean(dd)
x <- makeVector(1:10)
cachemean(x)
dd <- makeVector(1:10)
dd <- makeVector(1:5)
cachemean(makeVector(1:5))
cachemean(dd)
cachemean(x)
cachemean(makeVector(1:5))
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...)
{
m <- x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
print(m)
}
cachemean(makeVector(1:5))
cachemean(x)
cachemean(t<-makeVector(1:20))
cachemean(t)
library(datasets)
data(iris)
?iris
iris
iris[sepal.length]
iris["sepal.length""]
iris["sepal.length"]
iris["Sepal.Length"]
iris["Species"]
iris[iris$Species="virginia"]
iris[iris$Species=="virginia"]
iris[iris$Species=="virginica"]
iris[iris$Species=="virginica"]
iris[iris$Species="virginica"]
iris[iris$Species=="virginica",1]
q1 <- iris[iris$Species=="virginica",1]
mean(q1)
colMeans(iris)
iris[,1:4]
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 2, mean)
mean(iris[1])
mean(iris[,1])
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars[mtcars$cyl ==2,]
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars[hp]
mtcars["hp"]
mtcars[mtcars$cyl == 4,"hp"]
q4.1
q4.1 <- mtcars[mtcars$cyl == 4,"hp"]
q4.2 <- mtcars[mtcars$cyl == 6,"hp"]
mean(q4.2) - mean(q4.1)
q4.2 <- mtcars[mtcars$cyl == 8,"hp"]
mean(q4.2) - mean(q4.1)
debug(ls)
ls
ls
exit
quit
q
q
q
q
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
set <- function(y)
{
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
print(i)
}
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...)
{
m <- x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
print(m)
}
makeVector(c(1:5))
cachemean(makeVector(c(1:5)))
cachemean(t1<-makeVector(c(1:5)))
cachemean(t1)
t2 <- matrix(1:4, nrow=2)
t2
makeCacheMatrix(t2)
cacheSolve(t2)
cacheSolve(makeCacheMatrix(t2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
set <- function(y)
{
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
print(i)
}
cacheSolve(makeCacheMatrix(t2))
makeCacheMatrix(t2)
cacheSolve(makeCacheMatrix(t2))
cacheSolve(t2)
t2.getInverse
x.getInverse
x$getInverse
t2$getInverse
cacheSolve(makeCacheMatrix(t2))
cacheSolve(makeCacheMatrix(t2))
cacheSolve(makeCacheMatrix(t2))
t1 <- makeVector(1:8)
t1
cachemean(t1)
cachemean(t1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
set <- function(y)
{
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
print(i)
}
cacheSolve(makeCacheMatrix(t2))
cacheSolve(t3 <-makeCacheMatrix(t2))
cacheSolve(t3)
t4 <- makeCacheMatrix(t2)
cacheSolve(t4)
cacheSolve(t4)
a <- 1:20
b <- rnorm(20, 10, 7)
b
plot(a,b)
c <- a/2+3
c
plot(a,c)
plot(a,b,c)
?plot
plot(a,c, l)
plot(a,c, type = l)
plot(a,c, type = "l")
plot(a,c, type = "b")
plot(a,c, type = "o")
plot(a,c, type = "h")
plot(a,c, type = "s")
plot(a,c, type = "n")
plot(a,c, type = "s")
contour(a,b,c)
persp(a,b,c)
image(a,b,c)
a
b
c
image(a,b)
persp(a,b)
contour(a,b)
matrix(1,10,10)
contour(matrix(1,10,10))
a <- matrix(1,10,10)
matrix(1,10,10)
a <- matrix(1,10,10)
a[2,3]  <- 0
a[6,7] <- 2
contour(a)
persp(a)
persp(a, e = 0.2)
persp(a, e = 0.4)
persp(a, e = 2)
library("stringr", lib.loc="C:/Program Files/R/R-3.0.2/library")
detach("package:stringr", unload=TRUE)
c(1, 2, "three")
(1:3) * 2
(1:4) * c(1, 2)
(1:4) * (1:3)
(1:4) * (1:4)
capColor = c(huey = "red", duey = "blue", louie = "green")
capColor
as.vector(capColor)
capColor
capColor[1]
capColor[1,1]
capColor[,1]
capColor[2]
capColor[3]
capColor[4]
as.vector(capColor[3])
capColor["huey"]
names(capColor)[capColor == "blue"]
names(capColor)[capColor == "green"]
x <- c(4, 7, 6, 5, 2, 8)
i <- x < 6
i
j <- x > 7
j
x[i|j]
x[x<6]
x[x==6]
x[x>6]
x[c(TRUE, FALSE)]
x[c(-1,-2)]
L <- list(x = c(1:5), y = c("a", "b", "c"), z = capColor)
l
l <- L
l
l[[2]]
l[[3]]
l[["z"]]
l[["z",1]]
l[["z"]][1]
l$y
l$y$2
l$y[2]
l$z[2]
as.vector(l$z[2])
as.vector(l$z[2:3])
names(l$z[2:3])
class(names(l$z[2:3]))
as.vector(l$z[2])
l[["z"]][1]
class(l[["z"]][1])
d <- data.frame(x = 1:10, y = letters[1:10], z = LETTERS[1:10])
d
d[1]
d[[1]]
d[,11]
d[,1]
d[[1:2]]
d[,1:2]
d[,"x"]
d[,"x", d=F]
d[,"x", drop=F]
d[c("x","z")]
d[,c("x","z")]
d[x<3]
d[x<3,x]
d[x<3,"x"]
d[x<3,"Y"]
d[x<3,"Y", drop=F]
d[x<3,"y", drop=F]
d[x<3,"y"]
str(d)
d[2,]
d[x<3,"y", drop=F]
d[x<3,"y"]
d[x<3,"y"])as.vector()
as.vector(d[x<3,"y"])
as.vector(d[x<3,"y",drop=F])
d[x<3,"y",drop=F]
NA+1
sum(c(NA, 1, 2))
sum(c(NA, 1, 2), na.rm = T)
3==NA
NA==NA
TRUE|NA
length(c(1, 2, NULL, 4))
sum(c(1, 2, NULL, 4))
x <- NULL
x
c(x, 2)
2<NULL
2==NULL
NULL==NULL
pi/0
2 * Inf
4 * Inf
Inf - 1e+10
3 < -Inf
Inf == Inf
NaN + 1
exp(NaN)
exp(-Inf)
NA == NA
NA == NULL
NA < NULL
NA > NULL
NA <> NULL
NA !> NULL
NA => NULL
NA >= NULL
NA & FALSE
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
instal.packages("ggplot2")
instal.packages("gplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating), data = movies)
g <- ggplot(movies, aes(votes, rating), data = movies)
qplot(votes, rating, data = movies)
str(movies)
qplot(votes, rating, data = movies, col = mpaa)
qplot(votes, rating, data = movies, facet = mpaa)
qplot(votes, rating, data = movies, facet = .~mpaa)
qplot(votes, rating, data = movies, facet = . ~ mpaa)
qplot(votes, rating, data = movies, facets = . ~ mpaa)
qplot(votes, rating, data = movies, facets = mpaa ~ .)
qplot(votes, rating, data = movies, facets = mpaa ~ .)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/GitHub/RepData_PeerAssessment1")
